--
-- File generated with SQLiteStudio v3.3.3 on sáb abr 9 21:00:04 2022
--
-- Text encoding used: System
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: CLIENTES
DROP TABLE IF EXISTS CLIENTES;
CREATE TABLE "CLIENTES" (
	"CODIGO"	INTEGER,
	"CLIENTE"	VARCHAR(75),
	PRIMARY KEY("CODIGO")
);

-- Table: FATURA_ITENS
DROP TABLE IF EXISTS FATURA_ITENS;
CREATE TABLE "FATURA_ITENS" (
	"FATURA"	INTEGER,
	"PRODUTO"	INTEGER,
	"QTDE_ENVIADA"	REAL,
	"QTDE_RETORNADA"	REAL,
	"VALOR_UNIT"	real,
	FOREIGN KEY("FATURA") REFERENCES "FATURAS"("FATURA"),
	FOREIGN KEY("PRODUTO") REFERENCES "PRODUTOS"("CODIGO")
);

-- Table: FATURAS
DROP TABLE IF EXISTS FATURAS;
CREATE TABLE "FATURAS" (
	"FATURA"	INTEGER,
	"ESTORNO"	INTEGER,
	"DT_EMISSAO"	DATE,
	"CLIENTE"	INTEGER,
	"VALOR_FATURA"	numeric(5, 3),
	"VALOR_RETORNADO"	REAL,
	"SITUACAO"	VARCHAR(15),
	"DT_ESTORNO"	DATE,
	"NOTA_VENDA"	integer,
	PRIMARY KEY("FATURA"),
	FOREIGN KEY("CLIENTE") REFERENCES "CLIENTES"("CODIGO")
);

-- Table: FATURAS_LOG
DROP TABLE IF EXISTS FATURAS_LOG;
CREATE TABLE "FATURAS_LOG" (
	"CODIGO"	INTEGER,
	"TIPO"	VARCHAR(75),
	"DATA"	DATE,
	"FATURA"	INTEGER,
	"SITUACAO"	VARCHAR(75),
	"USUARIO"	INTEGER,
	FOREIGN KEY("FATURA") REFERENCES "FATURAS"("FATURA"),
	PRIMARY KEY("CODIGO" AUTOINCREMENT),
	FOREIGN KEY("USUARIO") REFERENCES "USUARIOS"("CODIGO")
);

-- Table: PRODUTOS
DROP TABLE IF EXISTS PRODUTOS;
CREATE TABLE "PRODUTOS" (
	"CODIGO"	INTEGER,
	"PRODUTO"	VARCHAR(75),
	PRIMARY KEY("CODIGO")
);

-- Table: USUARIOS
DROP TABLE IF EXISTS USUARIOS;
CREATE TABLE "USUARIOS" (
	"CODIGO"	integer NOT NULL,
	"USUARIO"	varchar(75) NOT NULL,
	"CARGO"	varchar(75),
	"SENHA"	VARCHAR(6),
	"SITUACAO"	VARCHAR(15),
	PRIMARY KEY("CODIGO" AUTOINCREMENT)
);

-- Index: IDX_CLIENTE
DROP INDEX IF EXISTS IDX_CLIENTE;
CREATE INDEX "IDX_CLIENTE" ON "CLIENTES" (
	"CODIGO",
	"CLIENTE"
);

-- Index: IDX_FATURA
DROP INDEX IF EXISTS IDX_FATURA;
CREATE INDEX "IDX_FATURA" ON "FATURAS" (
	"FATURA"
);

-- Index: IDX_FATURA_ITENS
DROP INDEX IF EXISTS IDX_FATURA_ITENS;
CREATE INDEX "IDX_FATURA_ITENS" ON "FATURA_ITENS" (
	"FATURA",
	"PRODUTO"
);

-- Index: IDX_FATURAS_LOG
DROP INDEX IF EXISTS IDX_FATURAS_LOG;
CREATE INDEX "IDX_FATURAS_LOG" ON "FATURAS_LOG" (
	"FATURA",
	"USUARIO"
);

-- Index: IDX_PRODUTO
DROP INDEX IF EXISTS IDX_PRODUTO;
CREATE INDEX "IDX_PRODUTO" ON "PRODUTOS" (
	"CODIGO",
	"PRODUTO"
);

-- Trigger: TG_FATURA_ITENS_INSERT
DROP TRIGGER IF EXISTS TG_FATURA_ITENS_INSERT;
CREATE TRIGGER TG_FATURA_ITENS_INSERT AFTER INSERT ON FATURA_ITENS BEGIN UPDATE FATURAS
SET VALOR_FATURA = (SELECT SUM(VALOR_UNIT*QTDE_ENVIADA) FROM FATURA_ITENS WHERE FATURA=NEW.FATURA),
VALOR_RETORNADO = (SELECT SUM(VALOR_UNIT*QTDE_RETORNADA) FROM FATURA_ITENS WHERE FATURA=NEW.FATURA)
WHERE FATURA=NEW.FATURA; END;

-- Trigger: TG_FATURA_ITENS_UPDATE
DROP TRIGGER IF EXISTS TG_FATURA_ITENS_UPDATE;
CREATE TRIGGER TG_FATURA_ITENS_UPDATE AFTER UPDATE ON FATURA_ITENS BEGIN UPDATE FATURAS
SET VALOR_FATURA = (SELECT SUM(VALOR_UNIT*QTDE_ENVIADA) FROM FATURA_ITENS WHERE FATURA=NEW.FATURA),
VALOR_RETORNADO = (SELECT SUM(VALOR_UNIT*QTDE_RETORNADA) FROM FATURA_ITENS WHERE FATURA=NEW.FATURA)
WHERE FATURA=NEW.FATURA; END;

-- Trigger: TG_FATURAS_DELETE
DROP TRIGGER IF EXISTS TG_FATURAS_DELETE;
CREATE TRIGGER TG_FATURAS_DELETE AFTER DELETE ON FATURAS BEGIN DELETE FROM FATURA_ITENS
WHERE FATURA=OLD.FATURA;

DELETE FROM FATURAS_LOG
WHERE FATURA=OLD.FATURA; END;

-- Trigger: TG_FATURAS_INSERT
DROP TRIGGER IF EXISTS TG_FATURAS_INSERT;
CREATE TRIGGER TG_FATURAS_INSERT BEFORE INSERT ON FATURAS BEGIN SELECT 
    CASE 
    WHEN (NEW.CLIENTE IS NULL) OR (NEW.CLIENTE = '') THEN 
        RAISE(ABORT,'Informe um cliente válido')
    end;
    
INSERT into FATURAS_LOG(
	DATA,
	FATURA,
             SITUACAO
	) values (
	datetime('NOW'),
	new.FATURA,
             NEW.SITUACAO
	); END;

-- Trigger: TG_FATURAS_UPDATE
DROP TRIGGER IF EXISTS TG_FATURAS_UPDATE;
CREATE TRIGGER TG_FATURAS_UPDATE BEFORE UPDATE ON FATURAS BEGIN INSERT into FATURAS_LOG(
	DATA,
	FATURA,
             SITUACAO
	) values (
	datetime('NOW'),
	new.FATURA,
             NEW.SITUACAO
	); END;

-- View: VW_FATURA_ITENS
DROP VIEW IF EXISTS VW_FATURA_ITENS;
CREATE VIEW VW_FATURA_ITENS
AS
select it.fatura, it.produto,
p.produto as produto_nome, 
it.qtde_retornada,
it.qtde_enviada,
it.valor_unit,
cast(it.valor_unit*it.qtde_enviada as decimal(5,2)) as valor_produto,
cast(it.valor_unit*it.QTDE_RETORNADA as decimal(5,2)) as valor_retornado,
cast(it.qtde_enviada-it.qtde_retornada as decimal(5,2)) as saldo
from fatura_itens it
join produtos p on p.codigo=it.produto;

-- View: VW_FATURAS
DROP VIEW IF EXISTS VW_FATURAS;
CREATE VIEW VW_FATURAS
AS
select f.fatura, 
f.estorno, 
f.nota_venda, 
f.dt_emissao,
f.cliente,
c.cliente as cliente_nome,
f.valor_fatura,
f.valor_retornado,
f.situacao,
(SELECT count(*) from FATURA_ITENS it where it.FATURA=f.fatura) as QTDE_ITENS
from faturas f
join clientes c on c.codigo=f.cliente;

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
